import React, { useState, useEffect } from "react";
import { useParams } from "react-router-dom";
import { Provider, TextField, View, Flex, ProgressCircle, Icon, Button } from "@adobe/react-spectrum";
import { attach } from "@adobe/uix-guest";
import { lightTheme } from "@adobe/react-spectrum";
import { extensionId } from "./Constants";
import metadata from '../../../../app-metadata.json';
import { register } from "@adobe/uix-guest";

export default CustomeReferenceRenderer = () => {
    const [isLoading, setIsLoading] = useState(true);
    const [connection, setConnection] = useState();
    const [model, setModel] = useState();
    const [value, setValue] = useState();
    const [error, setError] = useState();
    const [validationState, setValidationState] = useState();

    const { rendererId } = useParams();
    if (!rendererId) {
        console.error('Renderer id parameter is missed');
        return;
    }
    console.log('Renderer id:', rendererId);
    useEffect(() => {
        const init = async () => {
            // connect to the host 
            const connection = await attach({ id: extensionId });
            console.log(await connection.host.field.getModel());
            console.log(await connection.host.field.getValue());


            setConnection(connection);
            // get model
            setModel(await connection.host.field.getModel());
            // get field value
            setValue(await connection.host.field.getValue());
            // get field error
            setError(await connection.host.field.getError());
            // get field validation state
            setValidationState(await connection.host.field.getValidationState());
            setIsLoading(false);
        };
        init().catch((e) =>
            console.log("Extension got the error during initialization:", e)
        );
    }, []);

    const onChangeHandler = (v) => {
        console.log("onChange on extension side", v);
        connection.host.field.onChange(v);
    };

    const openSelector = () => {
        const url = "/index.html#/models"; // absolute or relative path
        connection.host.modal.showUrl({
            title: 'Modal Dialog: ',
            url,
            width: '900px',
        });
    }
    return (
        <Provider theme={lightTheme} colorScheme="light">
            {!isLoading ? (
                <>
                    Content generated by the extension Renderer#{rendererId}
                    <Flex direction="column" gap="size-65" marginBottom="size-100" alignContent={"baseline"}>
                        <TextField
                            validationState={error ? "invalid" : validationState}
                            label={model.multi ? null : model.label}
                            aria-label={model.label || model.name}
                            defaultValue={value}
                            //   maxLength={model.validation.maxLength}
                            isReadOnly={model.readOnly}
                            isDisabled={model.readOnly}
                            isRequired={model.required}
                            errorMessage={error}
                            onChange={onChangeHandler}
                            width="100%"
                        />

                        <Button variant="secondary" aria-label="select a fragment" onPress={() => { openSelector() }}>Select a Content Fragment</Button>

                    </Flex>
                </>
            ) : (
                <View width="97%" height="100%">
                    <ProgressCircle aria-label="Loading..." value={50} />
                </View>
            )}
        </Provider>
    );
};

