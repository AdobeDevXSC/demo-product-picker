import React, { useState, useEffect } from "react";
import { useParams } from "react-router-dom";
import { Provider, View, Flex, ProgressCircle, ActionButton, Text, ListBox, Section, Item, TextField } from "@adobe/react-spectrum";
import NewItem from '@spectrum-icons/workflow/NewItem';
import CrossSmall from '@spectrum-icons/ui/CrossSmall';
import { attach } from "@adobe/uix-guest";
import { lightTheme } from "@adobe/react-spectrum";
import { extensionId, test } from "./Constants";

export default CustomeReferenceRenderer = () => {
    const [isLoading, setIsLoading] = useState(true);
    const [connection, setConnection] = useState();
    const [model, setModel] = useState();
    const [value, setValue] = useState();
    const [error, setError] = useState();
    const [validationState, setValidationState] = useState();
    const [selected, setSelected] = useState({});
    const [skus, setSkus] = useState([]);
    const [productUrl, setProductUrl] = useState();

    const { rendererId } = useParams();
    if (!rendererId) {
        console.error('Renderer id parameter is missed');
        return;
    }

    useEffect(() => {
        const init = async () => {
            // connect to the host 
            const connection = await attach({ id: extensionId });
            const model = await connection.host.field.getModel();
            const value = await connection.host.field.getValue();
            const p = (connection.configuration && connection.configuration.productUrl) || 'https://main--demo-boilerplate--lamontacrook.hlx.page/misc/products.json?sheets=tory-burch';
            console.log(connection);
            setProductUrl(p);
            
            const { editables } = await connection.host.editorState.get();

            const selected = editables.filter((item) => {
                if (item.content === value && item.prop === model.name)
                    return true;
                else
                    return false;
            });
            console.log(connection);

            setSelected(selected[0]);
            const s = value.split(',').map(x => {return {id: x, name: x}});
            setSkus(s);

            setConnection(connection);
            // get model
            setModel(model);
            // get field value
            setValue(value);
            // get field error
            setError(await connection.host.field.getError());
            // get field validation state
            setValidationState(await connection.host.field.getValidationState());
            setIsLoading(false);
        };
        init().catch((e) =>
            console.log("Extension got the error during initialization:", e)
        );
    }, []);

    const onChangeHandler = (v) => {
        console.log("onChange on extension side", v);
        connection.host.field.onChange(v);
    };

    const openSelector = async () => {
        const url = `/index.html#/models/${selected.id}/${selected.type}/${rendererId}/${encodeURIComponent(productUrl)}`; // absolute or relative path
        connection.host.modal.showUrl({
            title: 'Select Products: ',
            url,
            width: '900px',
            height: '300px'
        });
    }

    const updateProducts = (item) => {
        const dProd = item.anchorKey;
        const newSkus = skus.filter(({id}) => id !== dProd);
        setSkus(newSkus);
        console.log(newSkus);
        const newValue = (newSkus.map(({id}) => id)).join(',');
        setValue(newValue);
        console.log('new value ', newValue);
        connection.host.editorActions.update({ target: { editable: { id: selected.id, type: selected.type } }, patch: [{ op: "replace", path: `/${rendererId}`, value: newValue }] })
    };
    console.log(skus);
    return (
        <Provider theme={lightTheme} colorScheme="light">
            {!isLoading ? (
                <>
                    <View
                        borderWidth="thin"
                        borderColor="dark"
                        borderRadius="medium"
                        padding="size-250">
                        {/* <Text>Content generated by the extension Renderer#{rendererId}</Text> */}
                        <Flex direction="column" gap="size-65" marginBottom="size-100" alignContent={"baseline"}>
                            <ListBox
                                width="size-2400"
                                aria-label="Selected Products"
                                selectedKeys={skus}
                                selectionMode="single"
                                onSelectionChange={updateProducts}
                                onAction={(key) => console.log(key)}>
                                {skus.length > 0 && (
                                    <Section title='Selected Products' items={skus}>
                                        {sku => (<Item textValue={sku.id} onClick>
                                            <CrossSmall marginTop={'5px'} />
                                            <Text>{sku.name}</Text>
                                            {/* <Text slot="description">{item.description}</Text> */}
                                        </Item>)}
                                    </Section>
                                )}
                            </ListBox>
                            <ActionButton variant="secondary" aria-label="select a product" onPress={() => { openSelector() }}>
                                <NewItem />
                                <Text>Select Products</Text>
                            </ActionButton>
                            <TextField
                                validationState={error ? "invalid" : validationState}
                                label={model.multi ? null : model.label}
                                aria-label={model.label || model.name}
                                defaultValue={value}
                                //   maxLength={model.validation.maxLength}
                                isReadOnly={model.readOnly}
                                isDisabled={model.readOnly}
                                isRequired={model.required}
                                errorMessage={error}
                                onChange={onChangeHandler}
                                width="100%"
                                value={value}
                            />
                        </Flex>
                    </View>
                </>
            ) : (
                <View width="97%" height="100%">
                    <ProgressCircle aria-label="Loading..." value={50} />
                </View>
            )
            }
        </Provider >
    );
};

