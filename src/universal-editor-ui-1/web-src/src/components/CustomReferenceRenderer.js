import React, { useState, useEffect } from "react";
import { useParams } from "react-router-dom";
import { Provider, View, Flex, ProgressCircle, ActionButton, Text, ListBox, Section, Item, TextField } from "@adobe/react-spectrum";
import NewItem from '@spectrum-icons/workflow/NewItem';
import CrossSmall from '@spectrum-icons/ui/CrossSmall';
import { attach } from "@adobe/uix-guest";
import { lightTheme } from "@adobe/react-spectrum";
import { extensionId, test } from "./Constants";
import { products } from "./Constants";
import metadata from '../../../../app-metadata.json';
//import { register } from "@adobe/uix-guest";

export default CustomeReferenceRenderer = () => {
    const [isLoading, setIsLoading] = useState(true);
    const [connection, setConnection] = useState();
    const [model, setModel] = useState();
    const [value, setValue] = useState();
    const [error, setError] = useState();
    const [validationState, setValidationState] = useState();
    const [selected, setSelected] = useState(test);

    const { rendererId } = useParams();
    if (!rendererId) {
        console.error('Renderer id parameter is missed');
        return;
    }
    console.log('Renderer id:', rendererId);
    useEffect(() => {
        const init = async () => {
            // connect to the host 
            const connection = await attach({ id: extensionId, methods: {value: setValue} });
            console.log(await connection.host.field.getModel());
            console.log(await connection.host.field.getValue());


            setConnection(connection);
            // get model
            setModel(await connection.host.field.getModel());
            // get field value
            setValue(await connection.host.field.getValue());
            // get field error
            setError(await connection.host.field.getError());
            // get field validation state
            setValidationState(await connection.host.field.getValidationState());
            setIsLoading(false);
        };
        init().catch((e) =>
            console.log("Extension got the error during initialization:", e)
        );
    }, []);

    const onChangeHandler = (v) => {
        console.log("onChange on extension side", v);
        connection.host.field.onChange(v);
    };

    const openSelector = () => {
        const url = "/index.html#/models"; // absolute or relative path

        connection.host.modal.showUrl({
            title: 'Select Products: ',
            url,
            width: '900px',
        });
    }
    // const products = [
    //     {   id: 'field-sneakers', 
    //         name: 'Field Sneakers', 
    //         description: 'A low-profile silhouette with an ultra-slim rubber sole.', 
    //         price: 250, 
    //         imageUrl: 'https://smartimaging.scene7.com/is/image/DynamicmediaNA1/field-sneaker' 
    //     }
    // ];
    console.log("Selected items:", selected);
    return (
        <Provider theme={lightTheme} colorScheme="light">
            {!isLoading ? (
                <>
                    <View
                        borderWidth="thin"
                        borderColor="dark"
                        borderRadius="medium"
                        padding="size-250">
                        <Text>Content generated by the extension Renderer#{rendererId}</Text>
                        <Flex direction="column" gap="size-65" marginBottom="size-100" alignContent={"baseline"}>
                            {/* <ListBox
                                width="size-2400"
                                aria-label="Selected Products"
                                selectedKeys={selected}
                                selectionMode="single"
                                onSelectionChange={setSelected}
                                onAction={(key) => console.log(`Triggering action on item ${key} ${[...selected].join(', ')}`)}>
                                {selected.length > 0 && (
                                    <Section title='Selected Products' items={selected}>
                                        {item => (<Item textValue={item.id} onClick>
                                            <CrossSmall marginTop={'5px'} />
                                            <Text>{item.name}</Text>
                                            <Text slot="description">{item.description}</Text>
                                        </Item>)}
                                    </Section>
                                )}
                            </ListBox> */}
                            <ActionButton variant="secondary" aria-label="select a product" onPress={() => { openSelector() }}>
                                <NewItem />
                                <Text>Select Products</Text>
                            </ActionButton>
                            <TextField
                                validationState={error ? "invalid" : validationState}
                                label={model.multi ? null : model.label}
                                aria-label={model.label || model.name}
                                defaultValue={value}
                                //   maxLength={model.validation.maxLength}
                                isReadOnly={model.readOnly}
                                isDisabled={model.readOnly}
                                isRequired={model.required}
                                errorMessage={error}
                                onChange={onChangeHandler}
                                width="100%"
                                value={value}
                            />
                        </Flex>
                    </View>
                </>
            ) : (
                <View width="97%" height="100%">
                    <ProgressCircle aria-label="Loading..." value={50} />
                </View>
            )
            }
        </Provider >
    );
};

